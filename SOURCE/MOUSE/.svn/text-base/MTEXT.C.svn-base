#include <dos.h>
#include <ClipApi.h>

static WORD wRowOld, wColOld;
static BYTE Back[ 6 ];
static BYTE bChars[ 6 ] = { 199, 200, 201, 202, 203, 204 };
static BOOL bInit = 0, bOnOff = 0;
static BYTE bRow = 0, bCol = 0;  // Coordenadas de texto del cursor del rat¢n
static WORD wLineWidth;          // Ancho de la pantalla multiplicado por 2
static BYTE bCharHeigth;         // Alto de una celdilla de caracter
static BOOL bLeft, bCenter, bRight;
static WORD wKLeft, wKCenter, wKRight;
static BYTE bOffs;
static BOOL bWorking = FALSE;
static BOOL bEga = 0;
static BOOL bInstaled;

static BYTE Arrow[ 3 ][ 16 ] = {
                                {  0x00,     // 00000000
                                   0x40,     // 01000000
                                   0x60,     // 01100000
                                   0x70,     // 01110000
                                   0x78,     // 01111000
                                   0x7C,     // 01111100
                                   0x7E,     // 01111110
                                   0x7F,     // 01111111
                                   0x7F,     // 01111111
                                   0x7F,     // 01111111
                                   0x7C,     // 01111100
                                   0x66,     // 01100110
                                   0x46,     // 01000110
                                   0x03,     // 00000011
                                   0x03,     // 00000011
                                   0x00 },   // 00000000
                                {  0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x80,     // 10000000
                                   0xC0,     // 11000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00 },   // 00000000
                                 { 0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00,     // 00000000
                                   0x00 } }; // 00000000

static BYTE ArrowMask[ 3 ][ 16 ] = { {
                                    0xC0,    // 11000000
                                    0xE0,    // 11100000
                                    0xF0,    // 11110000
                                    0xF8,    // 11111000
                                    0xFC,    // 11111100
                                    0xFE,    // 11111110
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0xEF,    // 11101111
                                    0xE7,    // 11100111
                                    0x07,    // 00000111
                                    0x03 },  // 00000011
                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x80,    // 10000000
                                    0xC0,    // 11000000
                                    0xE0,    // 11100000
                                    0xE0,    // 11100000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x80,    // 10000000
                                    0x80,    // 10000000
                                    0x80 },  // 10000000
                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 } } ; // 00000000


static BYTE RightArrow[ 3 ][ 16 ] = {
                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x08,    // 00001000
                                    0x18,    // 00011000
                                    0x38,    // 00111000
                                    0x7F,    // 01111111
                                    0x7F,    // 01111111
                                    0x38,    // 00111000
                                    0x18,    // 00011000
                                    0x08,    // 00001000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x40,    // 01000000
                                    0x60,    // 01100000
                                    0x70,    // 01110000
                                    0xF8,    // 11111000
                                    0xF8,    // 11111000
                                    0x70,    // 01110000
                                    0x60,    // 01100000
                                    0x40,    // 01000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000

static BYTE RightMask[ 3 ][ 16 ] = {
                                  { 0x00,    // 00000000
                                    0x0C,    // 00001100
                                    0x1C,    // 00011100
                                    0x3C,    // 00111100
                                    0x7F,    // 01111111
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0x7F,    // 01111111
                                    0x3C,    // 00111100
                                    0x1C,    // 00011100
                                    0x0C,    // 00001100
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000
                                  { 0x00,    // 00000000
                                    0xC0,    // 11000000
                                    0xE0,    // 11100000
                                    0xF0,    // 11110000
                                    0xF8,    // 11111000
                                    0xFC,    // 11111100
                                    0xFC,    // 11111100
                                    0xF8,    // 11111000
                                    0xF0,    // 11110000
                                    0xE0,    // 11100000
                                    0xC0,    // 11000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000
                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000

static BYTE DownArrow[ 3 ][ 16 ] = {
                                  { 0x00,    // 00000000
                                    0x0C,    // 00001100
                                    0x1E,    // 00011110
                                    0x3F,    // 00111111
                                    0x7F,    // 01111111
                                    0x0C,    // 00001100
                                    0x0C,    // 00001100
                                    0x0C,    // 00001100
                                    0x0C,    // 00001100
                                    0x7F,    // 01111111
                                    0x3F,    // 00111111
                                    0x1E,    // 00011110
                                    0x0C,    // 00001100
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x80,    // 10000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x80,    // 10000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000

static BYTE DownMask[ 3 ][ 16 ] = {
                                  { 0x0C,    // 00001100
                                    0x1E,    // 00011110
                                    0x3F,    // 00111111
                                    0x7F,    // 01111111
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0x1E,    // 00011110
                                    0x1E,    // 00011110
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0x7F,    // 01111111
                                    0x3F,    // 00111111
                                    0x1E,    // 00011110
                                    0x0C,    // 00001100
                                    0x00,    // 00000000
                                    0x00 },  // 00000000
                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x80,    // 10000000
                                    0xC0,    // 11000000
                                    0x80,    // 10000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x80,    // 10000000
                                    0xC0,    // 11000000
                                    0x80,    // 10000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000
                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000

static BYTE CrossArrow[ 3 ][ 16 ] = {
                                  { 0x00,    // 00000000
                                    0x01,    // 00000001
                                    0x03,    // 00000011
                                    0x07,    // 00000111
                                    0x01,    // 00000001
                                    0x11,    // 00010001
                                    0x31,    // 00110001
                                    0x7F,    // 01111111
                                    0x7F,    // 01111111
                                    0x31,    // 00110001
                                    0x11,    // 00010001
                                    0x01,    // 00000001
                                    0x07,    // 00000111
                                    0x03,    // 00000011
                                    0x01,    // 00000001
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x80,    // 10000000
                                    0xC0,    // 11000000
                                    0xE0,    // 11100000
                                    0x80,    // 10000000
                                    0x88,    // 10001000
                                    0x8C,    // 10001100
                                    0xFE,    // 11111110
                                    0xFE,    // 11111110
                                    0x8C,    // 10001100
                                    0x88,    // 10001000
                                    0x80,    // 10000000
                                    0xE0,    // 11100000
                                    0xC0,    // 11000000
                                    0x80,    // 10000000
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000

static BYTE CrossMask[ 3 ][ 16 ] = {
                                  { 0x01,    // 00000001
                                    0x03,    // 00000011
                                    0x07,    // 00000111
                                    0x0F,    // 00001111
                                    0x1F,    // 00011111
                                    0x3B,    // 00111011
                                    0x7F,    // 01111111
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0x7F,    // 01111111
                                    0x3B,    // 00111011
                                    0x1F,    // 00011111
                                    0x0F,    // 00001111
                                    0x07,    // 00000111
                                    0x03,    // 00000011
                                    0x01 },  // 00000001

                                  { 0x80,    // 10000000
                                    0xC0,    // 11000000
                                    0xE0,    // 11100000
                                    0xF0,    // 11110000
                                    0xF8,    // 11111000
                                    0xDC,    // 11011100
                                    0xFE,    // 11111110
                                    0xFF,    // 11111111
                                    0xFF,    // 11111111
                                    0xFE,    // 11111110
                                    0xDC,    // 11011100
                                    0xF8,    // 11111000
                                    0xF0,    // 11110000
                                    0xE0,    // 11100000
                                    0xC0,    // 11000000
                                    0x80 },  // 10000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000

static BYTE HandPoint[ 3 ][ 16 ] = {
                                  { 0x0C,    // 00001100
                                    0x12,    // 00010010
                                    0x12,    // 00010010
                                    0x13,    // 00010011
                                    0x12,    // 00010010
                                    0xF2,    // 11110010
                                    0x92,    // 10010010
                                    0x80,    // 10000000
                                    0x80,    // 10000000
                                    0x80,    // 10000000
                                    0x80,    // 10000000
                                    0x40,    // 01000000
                                    0x20,    // 00100000
                                    0x10,    // 00010000
                                    0x10,    // 00010000
                                    0x0F },  // 00001111

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0xB6,    // 10110110
                                    0x49,    // 01001001
                                    0x49,    // 01001001
                                    0x49,    // 01001001
                                    0x49,    // 01001001
                                    0x01,    // 00000001
                                    0x01,    // 00000001
                                    0x01,    // 00000001
                                    0x02,    // 00000010
                                    0x02,    // 00000010
                                    0x02,    // 00000010
                                    0x02,    // 00000010
                                    0xFE },  // 11111110

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000


static BYTE HandMask[ 3 ][ 16 ] = {
                                  { 0x0C,    // 00001100
                                    0x12,    // 00010010
                                    0x12,    // 00010010
                                    0x13,    // 00010011
                                    0x12,    // 00010010
                                    0xF2,    // 11110010
                                    0x92,    // 10010010
                                    0x80,    // 10000000
                                    0x80,    // 10000000
                                    0x80,    // 10000000
                                    0x80,    // 10000000
                                    0x40,    // 01000000
                                    0x20,    // 00100000
                                    0x10,    // 00010000
                                    0x10,    // 00010000
                                    0x0F },  // 00001111

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0xB6,    // 10110110
                                    0x49,    // 01001001
                                    0x49,    // 01001001
                                    0x49,    // 01001001
                                    0x49,    // 01001001
                                    0x01,    // 00000001
                                    0x01,    // 00000001
                                    0x01,    // 00000001
                                    0x02,    // 00000010
                                    0x02,    // 00000010
                                    0x02,    // 00000010
                                    0x02,    // 00000010
                                    0xFE },  // 11111110

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000

static BYTE SizeNWSE[ 3 ][ 16 ] = {
                                  { 0x00,    // 00000000
                                    0x7C,    // 01111100
                                    0x78,    // 01111000
                                    0x78,    // 01111000
                                    0x4C,    // 01001100
                                    0x06,    // 00000110
                                    0x03,    // 00000011
                                    0x01,    // 00000001
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x80,    // 10000000
                                    0xC0,    // 11000000
                                    0x60,    // 01100000
                                    0x32,    // 00110010
                                    0x1E,    // 00011110
                                    0x1E,    // 00011110
                                    0x3E,    // 00111110
                                    0x00,    // 00000000
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000


static BYTE SizeNWSEMask[ 3 ][ 16 ] = {
                                  { 0xFE,    // 11111110
                                    0xFE,    // 11111110
                                    0xFC,    // 11111100
                                    0xFC,    // 11111100
                                    0xFE,    // 11111110
                                    0xCF,    // 11001111
                                    0x07,    // 00000111
                                    0x03,    // 00000011
                                    0x01,    // 00000001
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x80,    // 10000000
                                    0xC0,    // 11000000
                                    0xE0,    // 11100000
                                    0xF3,    // 11110011
                                    0x7F,    // 01111111
                                    0x3F,    // 00111111
                                    0x3F,    // 00111111
                                    0x7F,    // 01111111
                                    0x7F,    // 01111111
                                    0x00 },  // 00000000

                                  { 0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00,    // 00000000
                                    0x00 }}; // 00000000

static BYTE bCursor = 0;
static LPBYTE pCursors[] = { ( LPBYTE ) Arrow,
                             ( LPBYTE ) RightArrow,
                             ( LPBYTE ) DownArrow,
                             ( LPBYTE ) CrossArrow,
                             ( LPBYTE ) HandPoint,
                             ( LPBYTE ) SizeNWSE };

static LPBYTE pMasks[]   = { ( LPBYTE ) ArrowMask,
                             ( LPBYTE ) RightMask,
                             ( LPBYTE ) DownMask,
                             ( LPBYTE ) CrossMask,
                             ( LPBYTE ) HandMask,
                             ( LPBYTE ) SizeNWSEMask };

//----------------------------------------------------------------------------

BYTE bMouseCursor( void ) { return bCursor; }

// ----------------------------------------------------------------------------

BOOL bIsEga( void )
{
   _AH = 0x12;
   _BX = 0xFF10;
   asm int 0x10;

   return ( _BX != 0xFF10 );
}

// ----------------------------------------------------------------------------

void KeyStuff( unsigned int uiKey )
{
   unsigned int uiTail        = peek( 0, 0x041C );
   unsigned int uiBufferStart = peek( 0, 0x0480 );
   unsigned int uiBufferEnd   = peek( 0, 0x0482 );

   poke( 0, 0x0400 + uiTail, uiKey );
   uiTail += 2;
   poke( 0, 0x041C, ( uiTail >= uiBufferEnd ) ? uiBufferStart: uiTail );
}

// ----------------------------------------------------------------------------

static void FontBegin( void )  // Copia el font a RAM
{
   asm cli;
   outport( 0x3C4, 0x0402 );
   outport( 0x3C4, 0x0704 );
   outport( 0x3C4, 0x0300 );
   asm sti;

   outport( 0x3CE, 0x0204 );
   outport( 0x3CE, 0x0005 );
   outport( 0x3CE, 0x0006 );
}

// ----------------------------------------------------------------------------

static void FontEnd( void )  // Copia el font a la tarjeta
{
   asm cli;
   outport( 0x3C4, 0x0302 );
   outport( 0x3C4, 0x0304 );
   outport( 0x3C4, 0x0300 );
   asm sti;

   outport( 0x3CE, 0x0004 );
   outport( 0x3CE, 0x1005 );
   outport( 0x3CE, 0x0E06 );
}

// ----------------------------------------------------------------------------

static BYTE bCharScanLines( void )
{
   _AX = 0x1130;
   _BH = 0;
   asm int 0x10;  // Ojo que toca BP

   return _CX;
}

// ----------------------------------------------------------------------------

void MouseReset( void )
{
   _AX = 0;
   asm int 0x33;
}

// ----------------------------------------------------------------------------

static void CopyCharDef( BYTE bDest, BYTE bOrigin )
{
   char * pFont = ( char * ) 0xA0000000;
   WORD w;

   for( w = 0; w < bCharHeigth; w++ )
      * ( pFont + ( bDest * 32 ) + w ) = * ( pFont + ( bOrigin * 32 ) + w );
}

// ----------------------------------------------------------------------------

static void ChangeDef( BYTE bDest, LPBYTE pbBlock, LPBYTE pbMask, BYTE bStart,
                       BYTE bEnd )
{
   LPBYTE pFont = ( LPBYTE ) 0xA0000000;
   WORD  b;

      for( b = bStart; b <= bEnd; b++ )
         pFont[ ( bDest * 32 ) + b ] = ( pFont[ ( bDest * 32 ) + b ] &
            pbMask[ b - bStart + ( ( bEnd < ( bCharHeigth - 1 ) ) ? ( ( bCharHeigth - 1 ) - bEnd ): 0 ) ] )
            | pbBlock[ b - bStart + ( ( bEnd < ( bCharHeigth - 1 ) ) ? ( ( bCharHeigth - 1 ) - bEnd ): 0 )];
}

// ----------------------------------------------------------------------------

static BYTE bPower( BYTE bTimes )
{
   BYTE bResult = 1, b;

   for( b = 0; b < bTimes; b++ )
      bResult *= 2;

   return bResult;
}

// ----------------------------------------------------------------------------

static void CursorMix( BYTE bVer, BYTE bHor )
{
   BYTE Cursor[ 3 ][ 16 ];
   BYTE Mask[ 3 ][ 16 ];

   BYTE b, bRest1, bRest2, bShift = bPower( bHor ) - 1;

   FontBegin();
   CopyCharDef( bChars[ 0 ], Back[ 0 ] );
   CopyCharDef( bChars[ 1 ], Back[ 1 ] );
   CopyCharDef( bChars[ 2 ], Back[ 2 ] );
   CopyCharDef( bChars[ 3 ], Back[ 3 ] );
   CopyCharDef( bChars[ 4 ], Back[ 4 ] );
   CopyCharDef( bChars[ 5 ], Back[ 5 ] );

   _bcopy( ( LPBYTE ) Cursor, ( LPBYTE ) pCursors[ bCursor ], 48 );
   _bcopy( ( LPBYTE ) Mask, ( LPBYTE ) pMasks[ bCursor ], 48 );

   for( b = 0; b < bCharHeigth; b++ )
   {
      bRest1 = ( Cursor[ 0 ][ b ] & bShift ) << ( 8 - bHor );
      bRest2 = ( Cursor[ 1 ][ b ] & bShift ) << ( 8 - bHor );
      Cursor[ 0 ][ b ] >>= bHor;
      Cursor[ 1 ][ b ] >>= bHor;
      Cursor[ 2 ][ b ] >>= bHor;
      Cursor[ 1 ][ b ] |= bRest1;
      Cursor[ 2 ][ b ] |= bRest2;

      bRest1 = ( Mask[ 0 ][ b ] & bShift ) << ( 8 - bHor );
      bRest2 = ( Mask[ 1 ][ b ] & bShift ) << ( 8 - bHor );
      Mask[ 0 ][ b ] >>= bHor;
      Mask[ 0 ][ b ] = ~Mask[ 0 ][ b ];
      Mask[ 1 ][ b ] >>= bHor;
      Mask[ 1 ][ b ] |= bRest1;
      Mask[ 1 ][ b ] = ~Mask[ 1 ][ b ];
      Mask[ 2 ][ b ] >>= bHor;
      Mask[ 2 ][ b ] |= bRest2;
      Mask[ 2 ][ b ] = ~Mask[ 2 ][ b ];
   }

   ChangeDef( bChars[ 0 ], Cursor[ 0 ], Mask[ 0 ], bVer, bCharHeigth - 1 );
   ChangeDef( bChars[ 1 ], Cursor[ 1 ], Mask[ 1 ], bVer, bCharHeigth - 1 );
   ChangeDef( bChars[ 2 ], Cursor[ 2 ], Mask[ 2 ], bVer, bCharHeigth - 1 );
   if( bVer )
   {
      ChangeDef( bChars[ 3 ], Cursor[ 0 ], Mask[ 0 ], 0, bVer - 1 );
      ChangeDef( bChars[ 4 ], Cursor[ 1 ], Mask[ 1 ], 0, bVer - 1 );
      ChangeDef( bChars[ 5 ], Cursor[ 2 ], Mask[ 2 ], 0, bVer - 1 );
   }
   FontEnd();
}

// ----------------------------------------------------------------------------

static _saveregs void TextMode( void )
{
   WORD  wButton  = _BX;
   WORD  wRow     = _DX;
   WORD  wCol     = _CX;
   WORD  wMickHor = _SI;
   WORD  wMickVer = _DI;
   LPBYTE pVideo   = ( LPBYTE ) 0xB8000000;
   BYTE  bVer, bHor;

   asm mov ax, DGROUP;
   asm mov ds, ax;

   if( ! bWorking )
   {
      bWorking = TRUE;

      if( wButton )
      {
         if( ( wButton & 1 ) && wKLeft )
            KeyStuff( wKLeft );
         if( ( wButton & 2 ) && wKRight )
            KeyStuff( wKRight );
         if( ( wButton & 4 ) && wKCenter )
            KeyStuff( wKCenter );
      }

      if( bOnOff && ( wMickHor || wMickVer ) && bEga )
      {
         bOffs  = ( bOffs ) ? ( bOffs - 1 ): 0;

         if( ! bOffs )
         {
            bOnOff = FALSE;

            // while( ! ( inportb( 0x3DA ) & 8 ) );
            // esto enlentece mucho!!!

            * ( pVideo + ( wRowOld * wLineWidth ) + ( wColOld * 2 ) )       = Back[ 0 ];
            * ( pVideo + ( wRowOld * wLineWidth ) + ( ( wColOld + 1 ) * 2 ) )   = Back[ 1 ];
            * ( pVideo + ( wRowOld++ * wLineWidth ) + ( ( wColOld + 2 ) * 2 ) ) = Back[ 2 ];
            * ( pVideo + ( wRowOld * wLineWidth ) + ( wColOld++ * 2 ) )     = Back[ 3 ];
            * ( pVideo + ( wRowOld * wLineWidth ) + ( wColOld++ * 2 ) )     = Back[ 4 ];
            * ( pVideo + ( wRowOld * wLineWidth ) + ( wColOld   * 2 ) )     = Back[ 5 ];

            _AX = 3;
            asm int 0x33;
            wRow = _DX;
            wCol = _CX;

            bVer  = ( wRow / 8 ) % bCharHeigth;
            bHor  = ( wCol / 8 ) % 9;
            wRow /= ( 8 * bCharHeigth );
            wCol /= ( 8 * 9 );

            Back[ 0 ] = * ( pVideo + ( wRow * wLineWidth ) + ( wCol * 2 ) );
            Back[ 1 ] = * ( pVideo + ( wRow * wLineWidth ) + ( ( wCol + 1 ) * 2 ) );
            Back[ 2 ] = * ( pVideo + ( wRow++ * wLineWidth ) + ( ( wCol + 2 ) * 2 ) );
            Back[ 3 ] = * ( pVideo + ( wRow * wLineWidth ) + ( wCol++ * 2 ) );
            Back[ 4 ] = * ( pVideo + ( wRow * wLineWidth ) + ( wCol++ * 2 ) );
            Back[ 5 ] = * ( pVideo + ( wRow * wLineWidth ) + ( wCol-- * 2 ) );

            CursorMix( bVer, bHor );

            * ( pVideo + ( --wRow * wLineWidth ) + ( --wCol * 2 ) )       = bChars[ 0 ];
            * ( pVideo + ( wRow * wLineWidth ) + ( ( wCol + 1 ) * 2 ) )   = bChars[ 1 ];
            * ( pVideo + ( wRow++ * wLineWidth ) + ( ( wCol + 2 ) * 2 ) ) = bChars[ 2 ];
            * ( pVideo + ( wRow * wLineWidth ) + ( wCol++ * 2 ) )     = bChars[ 3 ];
            * ( pVideo + ( wRow * wLineWidth ) + ( wCol++ * 2 ) )     = bChars[ 4 ];
            * ( pVideo + ( wRow-- * wLineWidth ) + ( wCol   * 2 ) )   = bChars[ 5 ];

            bOnOff = TRUE;
            wCol -= 2;
            wRowOld = wRow;
            wColOld = wCol;
         }
      }
      bWorking = FALSE;
   }
}

// ----------------------------------------------------------------------------

void MouseInit( BYTE bNormalMouse )
{
   WORD wScreenHeigth = peekb( 0, 0x484 );
   WORD wScreenWidth  = peek( 0, 0x44A ) - 1;
   WORD wHorRes, wVerRes;

   bEga        = bIsEga() && ! bNormalMouse;
   bInit       = TRUE;
   wLineWidth  = ( wScreenWidth + 1 ) * 2;
   bCharHeigth = bCharScanLines();

   wHorRes = wScreenWidth * 8 * 9;
   wVerRes = ( wScreenHeigth * 8 * bCharHeigth ) + 50;  // 8

   _AX = 0;
   asm int 0x33;
   bInstaled = _AX;

   if( bInstaled && bEga )
   {
      _AX = 0xF;
      _CX = 1;                    // Horizontal sensibility
      _DX = 1;                    // Vertical sensibility
      asm int 0x33;

      _CX =   0;                  // Defines Horizontal resolution
      _DX = wHorRes;
      _AX = 7;
      asm int 0x33;

      _CX =   0;                  // Defines Vertical resolution
      _DX = wVerRes;
      _AX = 8;
      asm int 0x33;

      _ES = FP_SEG( TextMode );
      _DX = FP_OFF( TextMode );
      _CX = 0x2B;                 // When moves or Button Pressed
      _AX = 0x000C;               // Event handler
      asm int 0x33;
   }
}

//----------------------------------------------------------------------------

void MouseOn( BYTE bSelCursor )
{
   WORD wRow, wCol;
   LPBYTE pVideo = ( LPBYTE ) 0xB8000000;
   BYTE  bVer, bHor;

   bCursor = bSelCursor;

   if( ! bInit )
      MouseInit( 0 );

   if( ! bInstaled )
      return;

   if( ! bWorking )
   {
      bWorking = TRUE;

      if( ! bOnOff )
      {
         bOffs = bOffs ? ( bOffs - 1 ): 0;

         if( ! bOffs )
         {
            bOnOff = TRUE;

            if( bEga )
            {
               _AX = 3;
               asm int 0x33;
               wRow = _DX;
               wCol = _CX;

               bVer  = ( wRow / 8 ) % bCharHeigth;
               bHor  = ( wCol / 8 ) % 9;
               wRow /= ( 8 * bCharHeigth );
               wCol /= ( 8 * 9 );

               Back[ 0 ] = * ( pVideo + ( wRow * wLineWidth ) + ( wCol * 2 ) );
               Back[ 1 ] = * ( pVideo + ( wRow * wLineWidth ) + ( ( wCol + 1 ) * 2 ) );
               Back[ 2 ] = * ( pVideo + ( wRow++ * wLineWidth ) + ( ( wCol + 2 ) * 2 ) );
               Back[ 3 ] = * ( pVideo + ( ( wRow ) * wLineWidth ) + ( wCol++ * 2 ) );
               Back[ 4 ] = * ( pVideo + ( ( wRow ) * wLineWidth ) + ( wCol++ * 2 ) );
               Back[ 5 ] = * ( pVideo + ( ( wRow ) * wLineWidth ) + ( wCol-- * 2 ) );

               CursorMix( bVer, bHor );

               // while( ! ( inportb( 0x3DA ) & 8 ) );
               // esto enlentece mucho

               * ( pVideo + ( --wRow * wLineWidth ) + ( --wCol * 2 ) )       = bChars[ 0 ];
               * ( pVideo + ( wRow * wLineWidth ) + ( ( wCol + 1 ) * 2 ) )   = bChars[ 1 ];
               * ( pVideo + ( wRow++ * wLineWidth ) + ( ( wCol + 2 ) * 2 ) ) = bChars[ 2 ];
               * ( pVideo + ( ( wRow ) * wLineWidth ) + ( wCol++ * 2 ) )     = bChars[ 3 ];
               * ( pVideo + ( ( wRow ) * wLineWidth ) + ( wCol++ * 2 ) )     = bChars[ 4 ];
               * ( pVideo + ( ( wRow ) * wLineWidth ) + ( wCol   * 2 ) )     = bChars[ 5 ];

               wRowOld = --wRow;
               wColOld = wCol - 2;
            }
            else
            {
               _AX = 0x0001;
               asm int 0x33;
            }
         }
      }
      bWorking = FALSE;
   }
}

// ----------------------------------------------------------------------------

void MouseOff( void )
{
   LPBYTE pVideo = ( LPBYTE ) 0xB8000000;

   if( ! bInstaled )
      return;

   while( bWorking );

   bWorking = TRUE;
   if( bOnOff )
   {
      bOnOff = FALSE;

      if( bEga )
      {
         // while( ! ( inportb( 0x3DA ) & 8 ) );
         // esto enlentece mucho!!!

         * ( pVideo + ( wRowOld * wLineWidth ) + ( wColOld * 2 ) )           = Back[ 0 ];
         * ( pVideo + ( wRowOld * wLineWidth ) + ( ( wColOld + 1 ) * 2 ) )   = Back[ 1 ];
         * ( pVideo + ( wRowOld++ * wLineWidth ) + ( ( wColOld + 2 ) * 2 ) ) = Back[ 2 ];
         * ( pVideo + ( ( wRowOld ) * wLineWidth ) + ( wColOld++ * 2 ) )     = Back[ 3 ];
         * ( pVideo + ( ( wRowOld ) * wLineWidth ) + ( wColOld++ * 2 ) )     = Back[ 4 ];
         * ( pVideo + ( ( wRowOld-- ) * wLineWidth ) + ( wColOld   * 2 ) )   = Back[ 5 ];
         wColOld -= 2;
      }
      else
      {
         _AX = 2;
         asm int 0x33;
      }
   }
   bOffs++;
   bWorking = FALSE;
}

// ----------------------------------------------------------------------------

BYTE bMouseRow() { return bRow; }
BYTE bMouseCol() { return bCol; }

// ----------------------------------------------------------------------------

void MouseUpdate()  // Actualiza los valores del rat¢n
{
   WORD wNewRow, wNewCol;
   WORD wButton;

   if( ! bInstaled )
      return;

   while( bWorking )
      ;
   bWorking = TRUE;

   _AX = 3;
   asm int 0x33;
   wNewRow = _DX;
   wNewCol = _CX;
   wButton = _BX;

   if( bEga )
   {
      bRow = wNewRow / ( bCharHeigth * 8 );
      bCol = ( wNewCol + 06 ) / ( 9 * 8 );
   }
   else
   {
      bRow = wNewRow / 8;
      bCol = wNewCol / 8;
   }

   bLeft   = wButton & 1;
   bRight  = wButton & 2;
   bCenter = wButton & 4;

   bWorking = FALSE;
}

// ----------------------------------------------------------------------------

BOOL bMouseLeft( void )    { return bLeft; }
BOOL bMouseRight( void )   { return bRight; }
BOOL bMouseCenter( void )  { return bCenter; }
BOOL bMousePressed( void ) { return ( bLeft || bRight || bCenter ); }

// ----------------------------------------------------------------------------

void MouseKeyLeft( WORD wKey )   { wKLeft   = wKey; }
void MouseKeyCenter( WORD wKey ) { wKCenter = wKey; }
void MouseKeyRight( WORD wKey )  { wKRight  = wKey; }

// ----------------------------------------------------------------------------

void MouseChars( LPBYTE szMouseChars )
{
  bChars[ 0 ] = szMouseChars[ 0 ];
  bChars[ 1 ] = szMouseChars[ 1 ];
  bChars[ 2 ] = szMouseChars[ 2 ];
  bChars[ 3 ] = szMouseChars[ 3 ];
  bChars[ 4 ] = szMouseChars[ 4 ];
  bChars[ 5 ] = szMouseChars[ 5 ];
}

//----------------------------------------------------------------------------//

void MouseSetArea( WORD wTop, WORD wLeft, WORD wBottom, WORD wRight )
{
   _AX = 8;
   _CX = wTop;
   _DX = wBottom;
   asm int 0x33;

   _AX = 7;
   _CX = wLeft;
   _DX = wRight;
   asm int 0x33;
}

//----------------------------------------------------------------------------//

void MouseSetCursor( WORD wCursor )
{
   if( wCursor != bCursor )
   {
      MouseOff();
      MouseOn( wCursor );
   }
}

//----------------------------------------------------------------------------//
